[
["index.html", "Uso do sistema R para análise de dados Chapter 1 Pré requisitos", " Uso do sistema R para análise de dados Jefferson Vieira José, André Pereira Freire Ferraz 2019-08-01 Chapter 1 Pré requisitos Material em construção. "],
["intro.html", "Chapter 2 R Básico 2.1 Expressões 2.2 Valores true/falso 2.3 Variáveis 2.4 Funções 2.5 Ajuda 2.6 Referência", " Chapter 2 R Básico Iremos abordar as expressões básicas do R. Começaremos simples, com números, strings e valores true/false. Em seguida, mostraremos como armazenar esses valores em variáveis e como transmiti-los as funções. Como obter ajuda sobre as funções e no final vamos carregar um arquivo 2.1 Expressões Vamos tentar matemática simples. Digite o comando abaixo e aperte enter 2+8 ## [1] 10 Note que é impresso o resultado, 10. Digite a frase “Engenharia Agrícola” &quot;Engenharia Agrícola&quot; ## [1] &quot;Engenharia Agrícola&quot; Agora tente multiplicar 6 vezes 5 (* é o operador de multiplicação). 6*5 ## [1] 30 2.2 Valores true/falso Algumas expressões retornam um “valor lógico”: TRUE ou FALSE e/ou “booleanos”. Vamos tentar digitar uma expressões que nos dá um valor lógico: 7&lt;12 ## [1] TRUE E outro valor lógico (sinal duplo de igualdade) 6+5==10 ## [1] FALSE T e F são taquigrafia para TRUE e FALSE. Tente isso: F==FALSE ## [1] TRUE 2.3 Variáveis Você pode armazenar valores em uma variável para usar mais tarde. Digite x &lt;- 28 para armazenar um valor em x. x&lt;-28 Tende dividr x por 4( / é o operador da divisão). x/4 ## [1] 7 Você pode retribuir qualquer valor a uma variável a qualquer momento. Tente atribuir “Engenharia Agrícola”em x. x &lt;- &quot;Engenharia Agrícola&quot; Tente imprimir o valor atual de x. x ## [1] &quot;Engenharia Agrícola&quot; 2.4 Funções Você pode chamar uma função digitando seu nome, seguido de um ou mais argumentos para essa função entre parênteses. Vamos tentar usar a função sum, para adicionar alguns números. Entrar: sum (2, 4, 6) ## [1] 12 Alguns argumentos têm nomes. Por exemplo, para repetir um valor 3 vezes, você chamaria a função rep e forneceria seu argumento times: rep(&quot;Engenharia Agrícola&quot;, times=3) ## [1] &quot;Engenharia Agrícola&quot; &quot;Engenharia Agrícola&quot; &quot;Engenharia Agrícola&quot; Tente chamar a função sqrt para obter a raiz quadrada 16. sqrt(16) ## [1] 4 2.5 Ajuda A função help ( ) traz ajuda para a função desejada. Tente exibir ajuda para a função mean: help (mean) ## starting httpd help server ... done A função example ( ) traz exemplos de usos. Tente exibir exemplos para a função min: example(min) ## ## min&gt; require(stats); require(graphics) ## ## min&gt; min(5:1, pi) #-&gt; one number ## [1] 1 ## ## min&gt; pmin(5:1, pi) #-&gt; 5 numbers ## [1] 3.141593 3.141593 3.000000 2.000000 1.000000 ## ## min&gt; x &lt;- sort(rnorm(100)); cH &lt;- 1.35 ## ## min&gt; pmin(cH, quantile(x)) # no names ## [1] -1.97889608 -0.80883977 -0.04349834 0.72791530 1.35000000 ## ## min&gt; pmin(quantile(x), cH) # has names ## 0% 25% 50% 75% 100% ## -1.97889608 -0.80883977 -0.04349834 0.72791530 1.35000000 ## ## min&gt; plot(x, pmin(cH, pmax(-cH, x)), type = &quot;b&quot;, main = &quot;Huber&#39;s function&quot;) ## ## min&gt; cut01 &lt;- function(x) pmax(pmin(x, 1), 0) ## ## min&gt; curve( x^2 - 1/4, -1.4, 1.5, col = 2) ## ## min&gt; curve(cut01(x^2 - 1/4), col = &quot;blue&quot;, add = TRUE, n = 500) ## ## min&gt; ## pmax(), pmin() preserve attributes of *first* argument ## min&gt; D &lt;- diag(x = (3:1)/4) ; n0 &lt;- numeric() ## ## min&gt; stopifnot(identical(D, cut01(D) ), ## min+ identical(n0, cut01(n0)), ## min+ identical(n0, cut01(NULL)), ## min+ identical(n0, pmax(3:1, n0, 2)), ## min+ identical(n0, pmax(n0, 4))) 2.6 Referência MELO, M. P.; PETERNELI, L. A. Conhecendo o R: Um visão mais que estatística. Viçosa, MG: UFV, 2013. 222p. Prof. Paulo Justiniando Ribeiro &gt;http://www.leg.ufpr.br/~paulojus/&lt; Prof. Adriano Azevedo Filho &gt;http://rpubs.com/adriano/esalq2012inicial&lt; Prof. Fernando de Pol Mayer &gt;https://fernandomayer.github.io/ce083-2016-2/&lt; Site Interativo Datacamp &gt;https://www.datacamp.com/&lt; "],
["estruturas-de-dados.html", "Chapter 3 Estruturas de Dados 3.1 Vetor 3.2 Matrizes 3.3 Visualizações em dados matriciais 3.4 Data.frame 3.5 Manipulando um Data.frame 3.6 Lista 3.7 Referência", " Chapter 3 Estruturas de Dados 3.1 Vetor Um vetor é simplesmente uma lista de valores. A maneira mais simples de usar um vetor é usando o comando c( ), que concatena elementos num mesmo objeto. Exemplo x&lt;- c(2,3,5,7,11) x ## [1] 2 3 5 7 11 Os argumentos de c( ) podem ser tanto elementos únicos quanto outros objetos. Adicione os três primeiros numeros primos no vetor x y&lt;- c(x,13,17,19) y ## [1] 2 3 5 7 11 13 17 19 3.1.1 Vetores de Sequência Se você precisa de um vetor com uma sequência de números, você pode cria-lo com a notação start:end. Vamos fazer um vetor com valores de 1 a 7: 1:7 ## [1] 1 2 3 4 5 6 7 Uma maneira mais versátil de fazer sequências é chamar a função seq. Vamos fazer o mesmo com seq: seq(1:7) ## [1] 1 2 3 4 5 6 7 A função seq também permite que você use incrementos diferentes de 1. Experimente com etapas de 0,5 seq(1,7,0.5) ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 seq(7,1,-0.5) ## [1] 7.0 6.5 6.0 5.5 5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 Todo objeto possui atributos intrínsecos: tipo e tamanho. Com relação ao tipo ele pode ser: numérico, caractere, complexo e lógico. Existem outros tipos, como por exemplo, funções ou expressões, porém esses não representam dados. As funções mode( ) e length( ) mostram o tipo e tamanho de um objeto, respectivamente z&lt;-c(1,3,5,7,11) mode (z) ## [1] &quot;numeric&quot; length(z) ## [1] 5 a &lt;- &quot;Angela&quot; b&lt;-TRUE; c&lt;-8i #objetos com tipos diferentes mode(a); ## [1] &quot;character&quot; mode(b); ## [1] &quot;logical&quot; mode(c) #exibe os atributos &quot;tipo&quot; dos objetos ## [1] &quot;complex&quot; Se o vetor é muito longo e não “cabe” em uma linha o R vai usar as linhas seguintes para continuar imprimindo o vetor. longo&lt;-100:50 #sequência decrescente de 100 a 50 longo #exibe o conteúdo do objeto ## [1] 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 ## [18] 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 ## [35] 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 Os números entre colchetes não fazem parte do objeto e indica a posição do vetor naquele ponto. Pode-se ver que [1] indica que o primeiro elemento do vetor estão naquela linha, [17] indica que a linha seguinte começa pelo décimo setimo elemento do vetor e assim por diante. Você pode recuperar um valor individual dentro de um vetor fornecendo seu índice numérico entre colchetes. Tente obter o valor 18: longo[18] ## [1] 83 Muitas línguagem de programação iniciam índices de matriz em 0, mas os índices vetoriais de R começam em 1. Obtenha o primeiro valor digitando: longo[1] ## [1] 100 Você pode atribuir novos valores dentro de um vetor existente. Tente mudar o terceiro valor 28: longo [3] &lt;- 28 Se você adicionar novos valores ao final, o vetor aumentará para acomodá-los. Vamos adicionar um valor no final longo[101] &lt;- 83 Você pode usar um vetor entre os colchetes para acessar vários valores. Tente obter a primeira e a terceira palavras longo[c(1,3)] ## [1] 100 28 Isso significa que você pode recuperar intervalos de valores. Obter a segunda a quarta palavras: longo[2:4] ## [1] 99 28 97 Você também pode definir intervalos de valores; apenas forneça os valores em um vetor. Adicione valores 5 a 7: longo[5:7] &lt;- c(42,52,75) Agora tente acessar o oitavo valor do vetor: longo[8] ## [1] 93 3.1.2 Nomes de vetores Para esse desafio, criaremos um vetor de 3 itens e armazená-lo na variável solo. Você pode atribuir nomes aos elementos de um vetor passando um segundo vetor preenchido com os nomes com a função names, assim: solo &lt;- 1:3 names(solo) &lt;- c(&quot;Argila&quot;, &quot;Areia&quot;,&quot;Silte&quot; ) solo ## Argila Areia Silte ## 1 2 3 Agora, defina o valor atual para o “silte” para um valor diferente usando o nome em vez da posição. solo[&quot;Silte&quot;]&lt;-20 3.1.3 Plotando um vetor A função barplot desenha um gráfico de barras com os valores de um vetor. Vamos criar um novo vetor para você e armazená-lo na variável chuva. Agora, tente passar o vetor para a função barplot: chuva &lt;- c(20,50,85) barplot(chuva) Se você atribuir nomes aos valores do vetor, o R usará esses nomes como rótulos no gráfico da barra. Vamos usar a função names novamente: names(chuva)&lt;- c(&quot;Rondonópolis&quot;, &quot;Maringá&quot;, &quot;Cruzeiro do Sul&quot;) Agora, se você digitar barplot com o vetor novamente, você verá os rótulos: barplot(chuva) Agora, tente chamar barplot em um vetor de números inteiros que variam de 1 a 100: barplot(1:100) 3.1.4 Operações matemáticas A maioria das operações aritméticas funcionam tão bem em vetores quanto em valores únicos. Vamos fazer outro vetor de exemplo para você trabalhar e armazená-lo a variável a Se você adicionar um escalar (um único valor) a um vetor, o escalar será? adicionado a cada valor no vetor, retornando um novo vetor com os resultados. Tente adicionar 1 a cada elemento em nosso vetor: a &lt;- c(1, 2, 3) a + 1 ## [1] 2 3 4 O mesmo se aplica na divisão, multiplicação ou qualquer outra aritmética básica. Tente dividir nosso vetor por 2: a / 2 ## [1] 0.5 1.0 1.5 Agora, tente multiplicar nosso vetor por 2: a*2 ## [1] 2 4 6 Se você adicionar dois vetores, R irá tirar cada valor de cada vetor e adicioná-los. Vamos fazer um segundo vetor para você experimentar e armazená-lo na variável b Tente adicioná-lo ao vetor a: b &lt;- c(4,5,6) a+b ## [1] 5 7 9 Agora tente subtrair b de a: a-b ## [1] -3 -3 -3 Você também pode tirar dois vetores e comparar cada item. Veja quais valores nos vetores são iguais aos de um segundo vetor a == c(1, 99, 3) ## [1] TRUE FALSE TRUE Observe que R não testou se os vetores inteiros eram iguais; verificou cada valor no vetor a contra o valor no mesmo índice no nosso novo vetor. Verifique se cada valor nos vetores são menores que o valor correspondente em outro vetor: a &lt; c(1, 99, 3) ## [1] FALSE TRUE FALSE Funções que normalmente funcionam com escalares também podem operar em cada elemento de um vetor. Tente obter o seno de cada valor em nosso vetor: sin(a) ## [1] 0.8414710 0.9092974 0.1411200 Agora tente obter as raízes quadradas com a função sqrt: sqrt(a) ## [1] 1.000000 1.414214 1.732051 3.1.5 Parcelas de dispersão A função plot leva dois vetores, um para valores X e um para valores Y, e desenha um gr?fico deles. Vamos desenhar um gr?fico que mostra a rela??o de n?meros e seus senos. Primeiro, precisaremos de alguns dados de amostra. Criaremos um vetor com alguns valores fracion?rios entre 0 e 20, e armazen?-lo na vari?vel x. E na vari?vel y um segundo vetor com os senos de x: x &lt;- seq(1, 20, 0.1) y&lt;-sin(x) Em seguida, basta chamar o plot com seus dois vetores: plot(x, y) Observa??o sobre o gr?fico que os valores do primeiro argumento ( x) s?o usados para o eixo horizontal, e os valores do segundo ( y) para o vertical. Vamos criar um vetor com alguns valores negativos e positivos para voc? e armazen?-lo na vari?vel valores. Tamb?m criaremos um segundo vetor com os valores absolutos do primeiro e armazen?-lo na vari?vel absoluto. Tente tra?ar os vetores, com os valores no eixo horizontal e no eixo vertical os absoluto. valores &lt;- -10:10 absoluto&lt;- abs(valores) plot(valores, absoluto) 3.1.6 Valores Faltantes ?s vezes, ao trabalhar com dados de amostra, um determinado valor n?o est? dispon?vel. Mas n?o ? uma boa id?ia apenas tirar esses valores. R tem um valor que indica explicitamente uma amostra n?o estava dispon?vel: NA. Muitas fun??es que funcionam com vetores tratam esse valor especialmente. Vamos criar um vetor para voc? com uma amostra ausente e armazen?-lo na vari?vel a. Tente obter a soma de seus valores e veja qual ? o resultado: a &lt;- c(1, 3, NA, 7, 9) sum(a) ## [1] NA A soma ? considerada “n?o dispon?vel” por padr?o porque um dos valores do vetor foi NA. Lembre-se desse comando para mostrar ajuda para uma fun??o? Traga documenta??o para a fun??o sum: help(sum) Como voc? v? na documenta??o, sum pode tomar um argumento opcional na.rm,. ? configurado FALSE por padr?o, mas se voc? configur?-lo TRUE, todos os NA argumentos ser?o removidos do vetor antes do c?lculo ser executado. Tente rondar sum novamente, com o na.rm conjunto para TRUE: sum(a, na.rm = T) ## [1] 20 3.2 Matrizes H? varias formas de criar uma matriz. O comando matriz() recebe um vetor como argumento e o transfoma em uma matrix de acordo com as dimens?es. Vamos fazer uma matriz de 3 linhas de altura por 4 colunas de largura, com todos os seus campos definidos 0. matrix(0,3,4) ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## [3,] 0 0 0 0 Voc? tamb?m pode usar um vetor para inicializar o valor de uma matriz. Para preencher uma matriz de 3x4, voc? precisar? de um vetor de 12 itens. a &lt;- (1:12) print (a) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 Agora chame matrix com o vetor, o n?mero de linhas e o n?mero de colunas: matrix (a,# chama o vetor 3,# linha 4) #coluna ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 Voc? tamb?m pode usar um vetor para inicializar o valor de uma matriz. Para preencher uma matriz 3x4, voc? precisar? de um vetor de 12 itens. N?s vamos fazer isso para voc? agora: a &lt;-1:12 a ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 Agora chame matrix com o vetor, o n?mero de linhas e o n?mero de colunas: matrix (a,3,4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 3.2.1 Outras formas matrix (a, 3) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 matrix (a, ,4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 Note que as matrizes s?o preenchidas ao longo das colunas. Para que a matriz seja preenchida por linhas deve-se alterar o argumento byrow, que, por padr?o, est? definido como FALSE, para TRUE matrix(a,3, byrow=T) ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 Os valores do vetor s?o copiados para a nova matriz, um por um. Voc? tamb?m pode reformular o pr?prio vetor em uma matriz. Crie um vetor de 8 itens: foliar &lt;- 1:8 A fun??o dim define as dimens?es para uma matriz. Ele aceita um vetor com o n?mero de linhas e o n?mero de colunas a serem atribu?das. Atribua novas dimens?es para foliar passando um vetor especificando 2 linhas e 4 colunas ( c(2, 4)): dim(foliar) &lt;- c(2,4) O vetor n?o ? mais unidimensional. Foi convertido, no local, para uma matriz. Agora, use a fun??o matrix para criar uma matriz 5x5, com seus campos inicializados para qualquer valor que voc? desejar. matrix (2,5,5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 2 2 2 2 2 ## [2,] 2 2 2 2 2 ## [3,] 2 2 2 2 2 ## [4,] 2 2 2 2 2 ## [5,] 2 2 2 2 2 3.2.2 Acesso a Matriz Obter valores de matrizes n?o ? diferente de vetores; voc? s? precisa fornecer dois ?ndices em vez de um. Abra a matriz foliar: print (foliar) ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 4 6 8 Tente obter o valor da segunda linha na terceira coluna da matriz foliar; foliar[2,3] ## [1] 6 o valor da primeira linha da quarta coluna foliar[1,4] ## [1] 7 Voc? pode obter uma linha inteira da matriz omitindo o ?ndice da coluna (mas mantenha a v?rgula). Tente recuperar a segunda linha: foliar[2,] ## [1] 2 4 6 8 Para obter uma coluna inteira, omita o ?ndice da linha. Recupere a quarta coluna: foliar[,4] ## [1] 7 8 Voc? pode ler v?rias linhas ou colunas, fornecendo um vetor ou sequ?ncia com seus ?ndices. Tente recuperar as colunas de 2 a 4: foliar[,2:4] ## [,1] [,2] [,3] ## [1,] 3 5 7 ## [2,] 4 6 8 O comando summary pode ser usado para obter informa??es da matriz summary(foliar) ## V1 V2 V3 V4 ## Min. :1.00 Min. :3.00 Min. :5.00 Min. :7.00 ## 1st Qu.:1.25 1st Qu.:3.25 1st Qu.:5.25 1st Qu.:7.25 ## Median :1.50 Median :3.50 Median :5.50 Median :7.50 ## Mean :1.50 Mean :3.50 Mean :5.50 Mean :7.50 ## 3rd Qu.:1.75 3rd Qu.:3.75 3rd Qu.:5.75 3rd Qu.:7.75 ## Max. :2.00 Max. :4.00 Max. :6.00 Max. :8.00 Se desejar um resumo de todos os elementos da matriz, basta transform?-la em um vetor summary(as.vector(foliar)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 2.75 4.50 4.50 6.25 8.00 3.3 Visualizações em dados matriciais Com um mapa de eleva??o. ? bem plana - tudo fica a 1 metro acima do n?vel do mar. Vamos criar uma matriz de 10 por 10 com todos os seus valores inicializados para 1 para voc?: elevacao &lt;- matrix (1,10,10) Na quarta linha, sexta coluna, defina a eleva??o para 0: elevacao [4, 6] &lt;- 0 Mapa de contorno dos valores passando a matriz para a fun??o contour contour(elevacao) criar um gr?fico em perspectiva 3D com a fun??o persp: persp (elevacao) Podemos consertar isso especificando nosso pr?prio valor para o par?metro expand. persp (elevacao, expand =0.2) R inclui alguns conjuntos de dados de amostra. Um deles ? volcanoum mapa 3D de um vulc?o adormecido da Nova Zel?ndia. ? simplesmente uma matriz de 87x61 com valores de eleva??o, mas mostra o poder das visualiza??es de matriz do R.Criar um mapa de calor contour(volcano) gr?fico em perspectiva: persp(volcano, expand=0.2) A fun??o imageir? criar um mapa de calor: image(volcano) 3.3.1 Mais informações sobre construções de Matrizes H? outros comandos que podem ser usados para construir matrizes como cbind() e rbind. Esses comandos concatenam colunas ou linhas, respectivamente, na matriz (ou vetor). a &lt;- matrix (10:1,ncol=2) #construir uma matriz qualquer a ## [,1] [,2] ## [1,] 10 5 ## [2,] 9 4 ## [3,] 8 3 ## [4,] 7 2 ## [5,] 6 1 b &lt;- cbind (a,1:5) #adicionar uma terceira coluna b ## [,1] [,2] [,3] ## [1,] 10 5 1 ## [2,] 9 4 2 ## [3,] 8 3 3 ## [4,] 7 2 4 ## [5,] 6 1 5 c&lt;- rbind(b,c(28,28,28)) c ## [,1] [,2] [,3] ## [1,] 10 5 1 ## [2,] 9 4 2 ## [3,] 8 3 3 ## [4,] 7 2 4 ## [5,] 6 1 5 ## [6,] 28 28 28 Opcionalmente matrizes podem ter nomes associados ?s linhas e colunas (“rownames”e “colnames”). Cada um destes componentes da matrix ? um vetor de nomes. m1 &lt;- matrix(1:12, ncol = 3) dimnames(m1) &lt;- list(c(&quot;L1&quot;, &quot;L2&quot;, &quot;L3&quot;, &quot;L4&quot;), c(&quot;C1&quot;, &quot;C2&quot;, &quot;C3&quot;)) dimnames(m1) ## [[1]] ## [1] &quot;L1&quot; &quot;L2&quot; &quot;L3&quot; &quot;L4&quot; ## ## [[2]] ## [1] &quot;C1&quot; &quot;C2&quot; &quot;C3&quot; Matrizes s?o muitas vezes utilizadas para armazenar frequ?ncias de cruzamentos entre vari?veis. Desta forma ? comum surgir a necessidade de obter os totais marginais, isto ? a soma dos elementos das linhas e/ou colunas das matrizes, o que pode ser diretamente obtido com margin.table(). margin.table(m1, margin = 1) ## L1 L2 L3 L4 ## 15 18 21 24 margin.table(m1, margin = 2) ## C1 C2 C3 ## 10 26 42 apply(m1, 2, median) ## C1 C2 C3 ## 2.5 6.5 10.5 3.3.2 Fatores Os fatores s?o vetores em que os elementos pertencem a uma ou mais categorias tem?ticas. Por exemplo: ao criar um vetor de indicadores de “tratamentos” em uma an?lise de experimentos devemos declarar este vetor como um “fator”. Pode criar um fator usando o comando factor(), ou o comando gl. factor(rep(paste(&quot;T&quot;, 1:3, sep = &quot;&quot;), c(4, 4, 3))) ## [1] T1 T1 T1 T1 T2 T2 T2 T2 T3 T3 T3 ## Levels: T1 T2 T3 peso &lt;- c(134.8, 139.7, 147.6, 132.3, 161.7, 157.7, 150.3, 144.7, 160.7, 172.7, 163.4, 161.3, 169.8, 168.2, 160.7, 161.0, 165.7, 160.0, 158.2, 151.0, 171.8, 157.3, 150.4, 160.4, 154.5, 160.4, 148.8, 154.0) trat &lt;- rep(seq(0,300,50), each=4) #?each dados &lt;- data.frame(peso, trat=as.factor(trat)) 3.3.3 Array O conceito de array generaliza a id?ia de matrix. Enquanto em uma matrix os elementos s?o organizados em duas dimens?es (linhas e colunas), em um array os elementos podem ser organizados em um n?mero arbitr?rio de dimens?es. No R um array ? definido utilizando a fun??o array(). ar1 &lt;- array(1:24, dim = c(3, 4, 2)) ar1 ## , , 1 ## ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 ## ## , , 2 ## ## [,1] [,2] [,3] [,4] ## [1,] 13 16 19 22 ## [2,] 14 17 20 23 ## [3,] 15 18 21 24 Veja agora um exemplo de dados j? inclu?do no R no formato de array. Para “carregar” e visualizar os dados digite: data(Titanic) Titanic ## , , Age = Child, Survived = No ## ## Sex ## Class Male Female ## 1st 0 0 ## 2nd 0 0 ## 3rd 35 17 ## Crew 0 0 ## ## , , Age = Adult, Survived = No ## ## Sex ## Class Male Female ## 1st 118 4 ## 2nd 154 13 ## 3rd 387 89 ## Crew 670 3 ## ## , , Age = Child, Survived = Yes ## ## Sex ## Class Male Female ## 1st 5 1 ## 2nd 11 13 ## 3rd 13 14 ## Crew 0 0 ## ## , , Age = Adult, Survived = Yes ## ## Sex ## Class Male Female ## 1st 57 140 ## 2nd 14 80 ## 3rd 75 76 ## Crew 192 20 Para obter maiores informa??es sobre estes dados digite: help(Titanic) Agora vamos responder ?s seguintes perguntas, mostrando os comandos do R utilizados sobre o array de dados. quantas pessoas havia no total? sum(Titanic) ## [1] 2201 quantas pessoas havia na tripula??o (crew)? sum(Titanic[4, , , ]) ## [1] 885 quantas pessoas sobreviveram e quantas morreram? apply(Titanic, 4, sum) ## No Yes ## 1490 711 quais as propor??es de sobreviventes entre homens e mulheres? margin.table(Titanic, margin = 1) ## Class ## 1st 2nd 3rd Crew ## 325 285 706 885 margin.table(Titanic, margin = 2) ## Sex ## Male Female ## 1731 470 margin.table(Titanic, margin = 3) ## Age ## Child Adult ## 109 2092 margin.table(Titanic, margin = 4) ## Survived ## No Yes ## 1490 711 Esta fun??o admite ainda ?ndices m?ltiplos que permitem outros resumos da tabela de dados. Por exemplo mostramos a seguir como obter o total de sobreviventes e n?o sobreviventes, separados por sexo e depois as porcentagens de sobreviventes para cada sexo. margin.table(Titanic, margin = c(2, 4)) ## Survived ## Sex No Yes ## Male 1364 367 ## Female 126 344 prop.table(margin.table(Titanic, margin = c(2, 4)), margin = 1) ## Survived ## Sex No Yes ## Male 0.7879838 0.2120162 ## Female 0.2680851 0.7319149 prop.table(margin.table(Titanic, margin = c(2, 1)), margin = 1) ## Class ## Sex 1st 2nd 3rd Crew ## Male 0.10398614 0.10340843 0.29462738 0.49797805 ## Female 0.30851064 0.22553191 0.41702128 0.04893617 3.4 Data.frame Os datas.frames s?o muitos semelhantes ?s matrizes, pois t?m linhas e colunas e, portanto, duas dimens?es. Entretando, diferentemente das matrizes, colunas diferentes podem armazenar elementos de tipos diferentes. Por exemplo, a primeira coluna pode ser num?rica, enquanto a segunda, constituida de caracteres. Cada coluna precisa ter o mesmo tamanho. Criar o vetor nomes nome &lt;- c(&quot;Lara Lins&quot;, &quot;Mayara Costa&quot;, &quot;Aline Souza&quot;, &quot;Maria Santos&quot;, &quot;Jos? Santos&quot;, &quot;N?colas Barros&quot;) criar vetor idade idade &lt;- c(17,18,16,15,15,18) Criar vetor sexo (categoria=fator) sexo &lt;- factor(c(&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;)) Criar vetor altura alt &lt;- c(180,170,160,150,140,168) Reunir tudo em um data.frame dados &lt;- data.frame(nome, idade, sexo, alt) Ver atributos da tabela str(dados) ## &#39;data.frame&#39;: 6 obs. of 4 variables: ## $ nome : Factor w/ 6 levels &quot;Aline Souza&quot;,..: 3 5 1 4 2 6 ## $ idade: num 17 18 16 15 15 18 ## $ sexo : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 1 1 1 2 2 ## $ alt : num 180 170 160 150 140 168 Adicionar nome as linhas com o comando row.names() row.names(dados) &lt;- c(1,2,3,4,5,6) dados ## nome idade sexo alt ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 ## 5 Jos? Santos 15 M 140 ## 6 N?colas Barros 18 M 168 names(dados) &lt;- c(&quot;Nome&quot;, &quot;Idade&quot;, &quot;Sexo&quot;, &quot;altura&quot;) dados ## Nome Idade Sexo altura ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 ## 5 Jos? Santos 15 M 140 ## 6 N?colas Barros 18 M 168 3.4.1 Índice dos Data.frames Buscar elementos dados[2,1] #elemento da linha 2, coluna 1 ## [1] Mayara Costa ## 6 Levels: Aline Souza Jos? Santos Lara Lins Maria Santos ... N?colas Barros dados[2,] #toda linha dois ## Nome Idade Sexo altura ## 2 Mayara Costa 18 F 170 Repare que apesar de “Nomes” ter sido criado como vetor de caracterer o R passou a ented?-lo como um fator dentro do data.frame. dados[,1] ## [1] Lara Lins Mayara Costa Aline Souza Maria Santos ## [5] Jos? Santos N?colas Barros ## 6 Levels: Aline Souza Jos? Santos Lara Lins Maria Santos ... N?colas Barros Transformar para caracterer dados[,1] &lt;- as.character(dados[,1]) dados[,1] ## [1] &quot;Lara Lins&quot; &quot;Mayara Costa&quot; &quot;Aline Souza&quot; &quot;Maria Santos&quot; ## [5] &quot;Jos? Santos&quot; &quot;N?colas Barros&quot; Acessando aos dados dados$Nome ## [1] &quot;Lara Lins&quot; &quot;Mayara Costa&quot; &quot;Aline Souza&quot; &quot;Maria Santos&quot; ## [5] &quot;Jos? Santos&quot; &quot;N?colas Barros&quot; dados$Nome[3] ## [1] &quot;Aline Souza&quot; dados$Nome [1:3] ## [1] &quot;Lara Lins&quot; &quot;Mayara Costa&quot; &quot;Aline Souza&quot; str(dados) ## &#39;data.frame&#39;: 6 obs. of 4 variables: ## $ Nome : chr &quot;Lara Lins&quot; &quot;Mayara Costa&quot; &quot;Aline Souza&quot; &quot;Maria Santos&quot; ... ## $ Idade : num 17 18 16 15 15 18 ## $ Sexo : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 1 1 1 2 2 ## $ altura: num 180 170 160 150 140 168 3.5 Manipulando um Data.frame Vo? pode manipular um data.frame add ou eliminando colunas ou linhas, assim como em matrizes. Podem-se usar os comandos cbind() e rbind para adcionar colunas e linhas rescpectivamente, a um data.frame dados &lt;- cbind (dados, #adcionar uma coluna Conceito=c(&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;C&quot;,&quot;A&quot;,&quot;B&quot;)) dados &lt;- rbind (dados, #adicionar uma linha &quot;7&quot;= c(&quot;Caio Pinto&quot;, 21, &quot;M&quot;, 172, &quot;C&quot;)) dados ## Nome Idade Sexo altura Conceito ## 1 Lara Lins 17 F 180 A ## 2 Mayara Costa 18 F 170 A ## 3 Aline Souza 16 F 160 A ## 4 Maria Santos 15 F 150 C ## 5 Jos? Santos 15 M 140 A ## 6 N?colas Barros 18 M 168 B ## 7 Caio Pinto 21 M 172 C Assim como para vetores e matrizes voce pode selecinar um subgrupo de um data.frame e armazen?-lo em um outro objeto ou utilizar ?ndices como o sinal negativo para eliminar linhas ou colunas de um data.frame. dados&lt;- dados [1:6,] #selecionar linha de 1 a 6 dados&lt;- dados [,-5] #excluir a quinta coluna dados ## Nome Idade Sexo altura ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 ## 5 Jos? Santos 15 M 140 ## 6 N?colas Barros 18 M 168 dados[dados$Sexo==&quot;F&quot;,] #exibir s? masculinos ## Nome Idade Sexo altura ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 A ordena??o das linhas de um data.frame segundo os dados contidos em determinadas coluna tamb?m ? extremamente ?til dados [order(dados$altura),] ## Nome Idade Sexo altura ## 5 Jos? Santos 15 M 140 ## 4 Maria Santos 15 F 150 ## 3 Aline Souza 16 F 160 ## 6 N?colas Barros 18 M 168 ## 2 Mayara Costa 18 F 170 ## 1 Lara Lins 17 F 180 dados [rev(order(dados$altura)),] ## Nome Idade Sexo altura ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 6 N?colas Barros 18 M 168 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 ## 5 Jos? Santos 15 M 140 3.5.1 Separando um data.frame por grupos split (dados, sexo) ## $F ## Nome Idade Sexo altura ## 1 Lara Lins 17 F 180 ## 2 Mayara Costa 18 F 170 ## 3 Aline Souza 16 F 160 ## 4 Maria Santos 15 F 150 ## ## $M ## Nome Idade Sexo altura ## 5 Jos? Santos 15 M 140 ## 6 N?colas Barros 18 M 168 3.6 Lista Lista s?o objetos muito ?t?is, pois s?o usados para combinar diferente estruturas de dados em um mesmo objeto, ou seja, vetores matrizes, arrays, data.frames e ate mesmo outras listas. pes &lt;- list (idade=32, nome=&quot;Maria&quot;, notas=c(98,95,78), B=matrix(1:4,2,2)) pes ## $idade ## [1] 32 ## ## $nome ## [1] &quot;Maria&quot; ## ## $notas ## [1] 98 95 78 ## ## $B ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Lista s?o construidas com o comando list (). Quando voc? exibe um objeto que ? uma lista, cada componente ? mostrado com seu nome $ ou [] 3.6.1 Alguns comandos que retornam listas Muitos comando do R retornam seu resultado na forma de listas. Um exemplo pode ser mostrado com o uso do comando t.tes(), que retorna um objeto que ? uma lista. x &lt;- c(1,3,2,3,4) y &lt;- c(4,5,5,4,4) tt &lt;- t.test (x,y, var.equal=T) tt ## ## Two Sample t-test ## ## data: x and y ## t = -3.182, df = 8, p-value = 0.01296 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.1044729 -0.4955271 ## sample estimates: ## mean of x mean of y ## 2.6 4.4 Comprovar que ? uma lista is.list(tt) ## [1] TRUE mode (tt) ## [1] &quot;list&quot; Exibir o componentes da lista names(tt) ## [1] &quot;statistic&quot; &quot;parameter&quot; &quot;p.value&quot; &quot;conf.int&quot; &quot;estimate&quot; ## [6] &quot;null.value&quot; &quot;stderr&quot; &quot;alternative&quot; &quot;method&quot; &quot;data.name&quot; tt$conf.int #intervalo de confianca ## [1] -3.1044729 -0.4955271 ## attr(,&quot;conf.level&quot;) ## [1] 0.95 3.7 Referência MELO, M. P.; PETERNELI, L. A. Conhecendo o R: Um visão mais que estatística. Viçosa, MG: UFV, 2013. 222p. Prof. Paulo Justiniando Ribeiro &gt;http://www.leg.ufpr.br/~paulojus/&lt; Prof. Adriano Azevedo Filho &gt;http://rpubs.com/adriano/esalq2012inicial&lt; Prof. Fernando de Pol Mayer &gt;https://fernandomayer.github.io/ce083-2016-2/&lt; Site Interativo Datacamp &gt;https://www.datacamp.com/&lt; "],
["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
