[
["criando-graficos-com-o-r.html", "Chapter 5 Criando Gráficos com o R 5.1 Exemplos de gráficos com o R 5.2 Entrada de dados 5.3 Usando a função plot() 5.4 Histogramas 5.5 Gráficos de Barras 5.6 Boxplots 5.7 Cores 5.8 Interagindo com a Janela gráfica 5.9 Texto e tamanho do símbolo 5.10 Fontes 5.11 Visualizar vários gráficos 5.12 Salvando gráficos", " Chapter 5 Criando Gráficos com o R Este capitulo foi baseado nos livros Conhecendo o R: Um visão mais que estatística AQUINO, J. A. R para cientistas sociais. - Ilhéus, BA: EDITUS, 2014. 157. ANJOS, A. Análise gráfica com uso do R. Apostila. Dep. de Estatistica da UFPR, 2016. 127p. Sites https://www.statmethods.net/index.html http://curso-r.github.io/index.html PET Estatística UFPR (2016). labestData: Biblioteca de Dados para Aprendizado de Estatística. R package version x.y-z.w. https://www.statmethods.net/index.html Modificações foram realizadas utilizando outros materiais que se encontram referenciado no final do Capitulo. O R é uma poderosa ferramenta no que diz respeito à confeção de gráficos. Iremos abordar três categorias de comandos gráficos, com o uso do pacote báscico do R o graphics\". Alguns pacotes foram desenvolvidos especialmente para manipulação de gráficos, como lattice, ggplot2, ggobi* e rgl. O R possui diferentes funções geradoras de gráficos, e essas são classificados como: Funções gráficas de alto nível: criam novos gráficos na janela, definindo eixos, título, etc. Exemplos: plot, hist, image, contour, persp etc. Funções gráficas de baixo nível: permitem adicionar novas informações em gráficos já criados, como novos dados, linhas etc. Exemplos: points, lines, abline, polygon, legend etc. Funções gráficas iterativas: permitem retirar ou adicionar informações aos gráficos já existentes, usando por exemplo o cursor do mouse. Exemplos: locator e identify. 5.1 Exemplos de gráficos com o R Você pode ver alguns exemplos de gráficos que podem ser criados no R com os seguintes comandos: demo(image) ## ## ## demo(image) ## ---- ~~~~~ ## ## &gt; # Copyright (C) 1997-2009 The R Core Team ## &gt; ## &gt; require(datasets) ## ## &gt; require(grDevices); require(graphics) ## ## &gt; x &lt;- 10*(1:nrow(volcano)); x.at &lt;- seq(100, 800, by=100) ## ## &gt; y &lt;- 10*(1:ncol(volcano)); y.at &lt;- seq(100, 600, by=100) ## ## &gt; # Using Terrain Colors ## &gt; ## &gt; image(x, y, volcano, col=terrain.colors(100),axes=FALSE) ## ## &gt; contour(x, y, volcano, levels=seq(90, 200, by=5), add=TRUE, col=&quot;brown&quot;) ## ## &gt; axis(1, at=x.at) ## ## &gt; axis(2, at=y.at) ## ## &gt; box() ## ## &gt; title(main=&quot;Maunga Whau Volcano&quot;, sub = &quot;col=terrain.colors(100)&quot;, font.main=4) ## ## &gt; # Using Heat Colors ## &gt; ## &gt; image(x, y, volcano, col=heat.colors(100), axes=FALSE) ## ## &gt; contour(x, y, volcano, levels=seq(90, 200, by=5), add=TRUE, col=&quot;brown&quot;) ## ## &gt; axis(1, at=x.at) ## ## &gt; axis(2, at=y.at) ## ## &gt; box() ## ## &gt; title(main=&quot;Maunga Whau Volcano&quot;, sub = &quot;col=heat.colors(100)&quot;, font.main=4) ## ## &gt; # Using Gray Scale ## &gt; ## &gt; image(x, y, volcano, col=gray(100:200/200), axes=FALSE) ## ## &gt; contour(x, y, volcano, levels=seq(90, 200, by=5), add=TRUE, col=&quot;black&quot;) ## ## &gt; axis(1, at=x.at) ## ## &gt; axis(2, at=y.at) ## ## &gt; box() ## ## &gt; title(main=&quot;Maunga Whau Volcano \\n col=gray(100:200/200)&quot;, font.main=4) ## ## &gt; ## Filled Contours are even nicer sometimes : ## &gt; example(filled.contour) ## ## flld.c&gt; require(&quot;grDevices&quot;) # for colours ## ## flld.c&gt; filled.contour(volcano, asp = 1) # simple ## ## flld.c&gt; x &lt;- 10*1:nrow(volcano) ## ## flld.c&gt; y &lt;- 10*1:ncol(volcano) ## ## flld.c&gt; filled.contour(x, y, volcano, color = function(n) hcl.colors(n, &quot;terrain&quot;), ## flld.c+ plot.title = title(main = &quot;The Topography of Maunga Whau&quot;, ## flld.c+ xlab = &quot;Meters North&quot;, ylab = &quot;Meters West&quot;), ## flld.c+ plot.axes = { axis(1, seq(100, 800, by = 100)) ## flld.c+ axis(2, seq(100, 600, by = 100)) }, ## flld.c+ key.title = title(main = &quot;Height\\n(meters)&quot;), ## flld.c+ key.axes = axis(4, seq(90, 190, by = 10))) # maybe also asp = 1 ## ## flld.c&gt; mtext(paste(&quot;filled.contour(.) from&quot;, R.version.string), ## flld.c+ side = 1, line = 4, adj = 1, cex = .66) ## ## flld.c&gt; # Annotating a filled contour plot ## flld.c&gt; a &lt;- expand.grid(1:20, 1:20) ## ## flld.c&gt; b &lt;- matrix(a[,1] + a[,2], 20) ## ## flld.c&gt; filled.contour(x = 1:20, y = 1:20, z = b, ## flld.c+ plot.axes = { axis(1); axis(2); points(10, 10) }) ## ## flld.c&gt; ## Persian Rug Art: ## flld.c&gt; x &lt;- y &lt;- seq(-4*pi, 4*pi, len = 27) ## ## flld.c&gt; r &lt;- sqrt(outer(x^2, y^2, &quot;+&quot;)) ## ## flld.c&gt; filled.contour(cos(r^2)*exp(-r/(2*pi)), axes = FALSE) ## ## flld.c&gt; ## rather, the key *should* be labeled: ## flld.c&gt; filled.contour(cos(r^2)*exp(-r/(2*pi)), frame.plot = FALSE, ## flld.c+ plot.axes = {}) demo(persp) ## ## ## demo(persp) ## ---- ~~~~~ ## ## &gt; ### Demos for persp() plots -- things not in example(persp) ## &gt; ### ------------------------- ## &gt; ## &gt; require(datasets) ## ## &gt; require(grDevices); require(graphics) ## ## &gt; ## (1) The Obligatory Mathematical surface. ## &gt; ## Rotated sinc function. ## &gt; ## &gt; x &lt;- seq(-10, 10, length.out = 50) ## ## &gt; y &lt;- x ## ## &gt; rotsinc &lt;- function(x,y) ## + { ## + sinc &lt;- function(x) { y &lt;- sin(x)/x ; y[is.na(y)] &lt;- 1; y } ## + 10 * sinc( sqrt(x^2+y^2) ) ## + } ## ## &gt; sinc.exp &lt;- expression(z == Sinc(sqrt(x^2 + y^2))) ## ## &gt; z &lt;- outer(x, y, rotsinc) ## ## &gt; oldpar &lt;- par(bg = &quot;white&quot;) ## ## &gt; persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = &quot;lightblue&quot;) ## ## &gt; title(sub=&quot;.&quot;)## work around persp+plotmath bug ## ## &gt; title(main = sinc.exp) ## ## &gt; persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = &quot;lightblue&quot;, ## + ltheta = 120, shade = 0.75, ticktype = &quot;detailed&quot;, ## + xlab = &quot;X&quot;, ylab = &quot;Y&quot;, zlab = &quot;Z&quot;) ## ## &gt; title(sub=&quot;.&quot;)## work around persp+plotmath bug ## ## &gt; title(main = sinc.exp) ## ## &gt; ## (2) Visualizing a simple DEM model ## &gt; ## &gt; z &lt;- 2 * volcano # Exaggerate the relief ## ## &gt; x &lt;- 10 * (1:nrow(z)) # 10 meter spacing (S to N) ## ## &gt; y &lt;- 10 * (1:ncol(z)) # 10 meter spacing (E to W) ## ## &gt; persp(x, y, z, theta = 120, phi = 15, scale = FALSE, axes = FALSE) ## ## &gt; ## (3) Now something more complex ## &gt; ## We border the surface, to make it more &quot;slice like&quot; ## &gt; ## and color the top and sides of the surface differently. ## &gt; ## &gt; z0 &lt;- min(z) - 20 ## ## &gt; z &lt;- rbind(z0, cbind(z0, z, z0), z0) ## ## &gt; x &lt;- c(min(x) - 1e-10, x, max(x) + 1e-10) ## ## &gt; y &lt;- c(min(y) - 1e-10, y, max(y) + 1e-10) ## ## &gt; fill &lt;- matrix(&quot;green3&quot;, nrow = nrow(z)-1, ncol = ncol(z)-1) ## ## &gt; fill[ , i2 &lt;- c(1,ncol(fill))] &lt;- &quot;gray&quot; ## ## &gt; fill[i1 &lt;- c(1,nrow(fill)) , ] &lt;- &quot;gray&quot; ## ## &gt; par(bg = &quot;lightblue&quot;) ## ## &gt; persp(x, y, z, theta = 120, phi = 15, col = fill, scale = FALSE, axes = FALSE) ## ## &gt; title(main = &quot;Maunga Whau\\nOne of 50 Volcanoes in the Auckland Region.&quot;, ## + font.main = 4) ## ## &gt; par(bg = &quot;slategray&quot;) ## ## &gt; persp(x, y, z, theta = 135, phi = 30, col = fill, scale = FALSE, ## + ltheta = -120, lphi = 15, shade = 0.65, axes = FALSE) ## ## &gt; ## Don&#39;t draw the grid lines : border = NA ## &gt; persp(x, y, z, theta = 135, phi = 30, col = &quot;green3&quot;, scale = FALSE, ## + ltheta = -120, shade = 0.75, border = NA, box = FALSE) ## ## &gt; ## `color gradient in the soil&#39; : ## &gt; fcol &lt;- fill ; fcol[] &lt;- terrain.colors(nrow(fcol)) ## ## &gt; persp(x, y, z, theta = 135, phi = 30, col = fcol, scale = FALSE, ## + ltheta = -120, shade = 0.3, border = NA, box = FALSE) ## ## &gt; ## `image like&#39; colors on top : ## &gt; fcol &lt;- fill ## ## &gt; zi &lt;- volcano[ -1,-1] + volcano[ -1,-61] + ## + volcano[-87,-1] + volcano[-87,-61] ## / 4 ## ## &gt; fcol[-i1,-i2] &lt;- ## + terrain.colors(20)[cut(zi, ## + stats::quantile(zi, seq(0,1, length.out = 21)), ## + include.lowest = TRUE)] ## ## &gt; persp(x, y, 2*z, theta = 110, phi = 40, col = fcol, scale = FALSE, ## + ltheta = -120, shade = 0.4, border = NA, box = FALSE) ## ## &gt; ## reset par(): ## &gt; par(oldpar) demo(graphics) ## ## ## demo(graphics) ## ---- ~~~~~~~~ ## ## &gt; # Copyright (C) 1997-2009 The R Core Team ## &gt; ## &gt; require(datasets) ## ## &gt; require(grDevices); require(graphics) ## ## &gt; ## Here is some code which illustrates some of the differences between ## &gt; ## R and S graphics capabilities. Note that colors are generally specified ## &gt; ## by a character string name (taken from the X11 rgb.txt file) and that line ## &gt; ## textures are given similarly. The parameter &quot;bg&quot; sets the background ## &gt; ## parameter for the plot and there is also an &quot;fg&quot; parameter which sets ## &gt; ## the foreground color. ## &gt; ## &gt; ## &gt; x &lt;- stats::rnorm(50) ## ## &gt; opar &lt;- par(bg = &quot;white&quot;) ## ## &gt; plot(x, ann = FALSE, type = &quot;n&quot;) ## ## &gt; abline(h = 0, col = gray(.90)) ## ## &gt; lines(x, col = &quot;green4&quot;, lty = &quot;dotted&quot;) ## ## &gt; points(x, bg = &quot;limegreen&quot;, pch = 21) ## ## &gt; title(main = &quot;Simple Use of Color In a Plot&quot;, ## + xlab = &quot;Just a Whisper of a Label&quot;, ## + col.main = &quot;blue&quot;, col.lab = gray(.8), ## + cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3) ## ## &gt; ## A little color wheel. This code just plots equally spaced hues in ## &gt; ## a pie chart. If you have a cheap SVGA monitor (like me) you will ## &gt; ## probably find that numerically equispaced does not mean visually ## &gt; ## equispaced. On my display at home, these colors tend to cluster at ## &gt; ## the RGB primaries. On the other hand on the SGI Indy at work the ## &gt; ## effect is near perfect. ## &gt; ## &gt; par(bg = &quot;gray&quot;) ## ## &gt; pie(rep(1,24), col = rainbow(24), radius = 0.9) ## ## &gt; title(main = &quot;A Sample Color Wheel&quot;, cex.main = 1.4, font.main = 3) ## ## &gt; title(xlab = &quot;(Use this as a test of monitor linearity)&quot;, ## + cex.lab = 0.8, font.lab = 3) ## ## &gt; ## We have already confessed to having these. This is just showing off X11 ## &gt; ## color names (and the example (from the postscript manual) is pretty &quot;cute&quot;. ## &gt; ## &gt; pie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12) ## ## &gt; names(pie.sales) &lt;- c(&quot;Blueberry&quot;, &quot;Cherry&quot;, ## + &quot;Apple&quot;, &quot;Boston Cream&quot;, &quot;Other&quot;, &quot;Vanilla Cream&quot;) ## ## &gt; pie(pie.sales, ## + col = c(&quot;purple&quot;,&quot;violetred1&quot;,&quot;green3&quot;,&quot;cornsilk&quot;,&quot;cyan&quot;,&quot;white&quot;)) ## ## &gt; title(main = &quot;January Pie Sales&quot;, cex.main = 1.8, font.main = 1) ## ## &gt; title(xlab = &quot;(Don&#39;t try this at home kids)&quot;, cex.lab = 0.8, font.lab = 3) ## ## &gt; ## Boxplots: I couldn&#39;t resist the capability for filling the &quot;box&quot;. ## &gt; ## The use of color seems like a useful addition, it focuses attention ## &gt; ## on the central bulk of the data. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; n &lt;- 10 ## ## &gt; g &lt;- gl(n, 100, n*100) ## ## &gt; x &lt;- rnorm(n*100) + sqrt(as.numeric(g)) ## ## &gt; boxplot(split(x,g), col=&quot;lavender&quot;, notch=TRUE) ## ## &gt; title(main=&quot;Notched Boxplots&quot;, xlab=&quot;Group&quot;, font.main=4, font.lab=1) ## ## &gt; ## An example showing how to fill between curves. ## &gt; ## &gt; par(bg=&quot;white&quot;) ## ## &gt; n &lt;- 100 ## ## &gt; x &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; y &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; xx &lt;- c(0:n, n:0) ## ## &gt; yy &lt;- c(x, rev(y)) ## ## &gt; plot(xx, yy, type=&quot;n&quot;, xlab=&quot;Time&quot;, ylab=&quot;Distance&quot;) ## ## &gt; polygon(xx, yy, col=&quot;gray&quot;) ## ## &gt; title(&quot;Distance Between Brownian Motions&quot;) ## ## &gt; ## Colored plot margins, axis labels and titles. You do need to be ## &gt; ## careful with these kinds of effects. It&#39;s easy to go completely ## &gt; ## over the top and you can end up with your lunch all over the keyboard. ## &gt; ## On the other hand, my market research clients love it. ## &gt; ## &gt; x &lt;- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02) ## ## &gt; par(bg=&quot;lightgray&quot;) ## ## &gt; plot(x, type=&quot;n&quot;, axes=FALSE, ann=FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;cornsilk&quot;, border=&quot;black&quot;) ## ## &gt; lines(x, col=&quot;blue&quot;) ## ## &gt; points(x, pch=21, bg=&quot;lightcyan&quot;, cex=1.25) ## ## &gt; axis(2, col.axis=&quot;blue&quot;, las=1) ## ## &gt; axis(1, at=1:12, lab=month.abb, col.axis=&quot;blue&quot;) ## ## &gt; box() ## ## &gt; title(main= &quot;The Level of Interest in R&quot;, font.main=4, col.main=&quot;red&quot;) ## ## &gt; title(xlab= &quot;1996&quot;, col.lab=&quot;red&quot;) ## ## &gt; ## A filled histogram, showing how to change the font used for the ## &gt; ## main title without changing the other annotation. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; x &lt;- rnorm(1000) ## ## &gt; hist(x, xlim=range(-4, 4, x), col=&quot;lavender&quot;, main=&quot;&quot;) ## ## &gt; title(main=&quot;1000 Normal Random Variates&quot;, font.main=3) ## ## &gt; ## A scatterplot matrix ## &gt; ## The good old Iris data (yet again) ## &gt; ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, font.main=4, pch=19) ## ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, pch=21, ## + bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) ## ## &gt; ## Contour plotting ## &gt; ## This produces a topographic map of one of Auckland&#39;s many volcanic &quot;peaks&quot;. ## &gt; ## &gt; x &lt;- 10*1:nrow(volcano) ## ## &gt; y &lt;- 10*1:ncol(volcano) ## ## &gt; lev &lt;- pretty(range(volcano), 10) ## ## &gt; par(bg = &quot;lightcyan&quot;) ## ## &gt; pin &lt;- par(&quot;pin&quot;) ## ## &gt; xdelta &lt;- diff(range(x)) ## ## &gt; ydelta &lt;- diff(range(y)) ## ## &gt; xscale &lt;- pin[1]/xdelta ## ## &gt; yscale &lt;- pin[2]/ydelta ## ## &gt; scale &lt;- min(xscale, yscale) ## ## &gt; xadd &lt;- 0.5*(pin[1]/scale - xdelta) ## ## &gt; yadd &lt;- 0.5*(pin[2]/scale - ydelta) ## ## &gt; plot(numeric(0), numeric(0), ## + xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd, ## + type = &quot;n&quot;, ann = FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;green3&quot;) ## ## &gt; contour(x, y, volcano, levels = lev, col=&quot;yellow&quot;, lty=&quot;solid&quot;, add=TRUE) ## ## &gt; box() ## ## &gt; title(&quot;A Topographic Map of Maunga Whau&quot;, font= 4) ## ## &gt; title(xlab = &quot;Meters North&quot;, ylab = &quot;Meters West&quot;, font= 3) ## ## &gt; mtext(&quot;10 Meter Contour Spacing&quot;, side=3, line=0.35, outer=FALSE, ## + at = mean(par(&quot;usr&quot;)[1:2]), cex=0.7, font=3) ## ## &gt; ## Conditioning plots ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; coplot(lat ~ long | depth, data = quakes, pch = 21, bg = &quot;green3&quot;) ## ## &gt; par(opar) 5.2 Entrada de dados Nesse tópico utlizaremos o arquivo de dados dadosfisio.csv. Dados fisico hidrico de 3 solos com textutas diferentes. Cod. Solo Areia Silte Argila Z1 NITOSSOLO 122 121 757 Z2 LATOSSOLO 710 80 210 Z3 LATOSSOLO 892 10 98 Ler dados via web. solo &lt;- read.table(&quot;https://www.dropbox.com/s/zg7fyg1iewtji49/dadosfisio.csv?dl=1&quot;, sep = &quot;;&quot;, header = T, dec = &quot;,&quot;) Verificar a estrutura de dados. str(solo) ## &#39;data.frame&#39;: 108 obs. of 16 variables: ## $ z : int 1 1 1 1 1 1 1 1 1 1 ... ## $ x : int 1 1 1 1 1 1 3 3 3 3 ... ## $ y : int 1 3 5 7 9 11 1 3 5 7 ... ## $ cota : num 9.15 8.95 8.78 8.59 8.48 8.41 8.93 8.76 8.58 8.48 ... ## $ ds : num 1.5 1.47 1.47 1.39 1.38 ... ## $ cc : num 0.398 0.382 0.351 0.372 0.356 ... ## $ ma : num 0.129 0.153 0.185 0.188 0.208 ... ## $ ptotal: num 0.526 0.535 0.537 0.561 0.564 ... ## $ tibo : num 46.1 19.2 172.8 96 30.7 ... ## $ tibe : num 26.8 26.1 113.9 74.8 37.2 ... ## $ a : num 926 384 275 1207 151 ... ## $ b : num -0.529 -0.418 -0.131 -0.376 -0.227 ... ## $ X3 : num 518 243 238 798 118 ... ## $ X60 : num 153.2 92.7 176.5 335.4 69.9 ... ## $ X90 : num 106.2 69.4 161.2 258.4 59.8 ... ## $ X120 : num 73.6 52 147.2 199 51.1 ... Resumo estatástico da coluna 5 a coluna 8 de todos os solos summary(solo[5:8]) ## ds cc ma ptotal ## Min. :1.263 Min. :0.1501 Min. :0.004834 Min. :0.2257 ## 1st Qu.:1.500 1st Qu.:0.2505 1st Qu.:0.047689 1st Qu.:0.3090 ## Median :1.722 Median :0.2712 Median :0.081510 Median :0.3284 ## Mean :1.660 Mean :0.2998 Mean :0.090675 Mean :0.3905 ## 3rd Qu.:1.787 3rd Qu.:0.3579 3rd Qu.:0.129955 3rd Qu.:0.5269 ## Max. :1.960 Max. :0.4997 Max. :0.238551 Max. :0.6015 Neste exemplo vamos analisar cada solo separadamente usando o comando subset() solo1 &lt;- subset(solo, z==1) solo2 &lt;- subset(solo, z==2) solo3 &lt;- subset(solo, z==3) 5.3 Usando a função plot() A função plot() inicia um novo gráfico. Em sua forma mais simples a função recebe valores de coordenadas ds (densidade do solo) e ptotal (porosidade total do solo) do solo z1. plot(solo1$ds,solo1$ptotal) Vamos no gráfico inserir linhas ligando os pontos. Use o argumento *type=“l” na função plot() plot(solo1$ds,solo1$ptotal, type = &quot;l&quot;) Verifique outras opcões para os gráfico type = “p” especifica o tipo de plotagem “p”: pontos, “l”: linhas, “b”: pontos conectados por linhas, “o”: id. mas as linhas estão acima dos pontos, “h”: linhas verticais, “s”: passos, os dados são representados pelo topo das linhas verticais, “S”: id. mas os dados são representados pela parte inferior das linhas verticais x &lt;- 0:12 y &lt;- sin(pi/5 * x) op &lt;- par(mfrow = c(3,3), mar = .1+ c(2,2,3,1)) for (tp in c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;, &quot;c&quot;,&quot;o&quot;,&quot;h&quot;, &quot;s&quot;,&quot;S&quot;,&quot;n&quot;)) { plot(y ~ x, type = tp, main = paste0(&quot;plot(*, type = \\&quot;&quot;, tp, &quot;\\&quot;)&quot;)) if(tp == &quot;S&quot;) { lines(x, y, type = &quot;s&quot;, col = &quot;red&quot;, lty = 2) mtext(&quot;lines(*, type = \\&quot;s\\&quot;, ...)&quot;, col = &quot;red&quot;, cex = 0.8) } } par(op) 5.3.1 Mudando o padrão dos pontos pch= Pode-se usar diferentes padrões para os pontos usando o argumento pch=.Diferentes tipos de símbolos são associados a diferentes números. Pode-se ainda usar caracteres como o simbolo desejado. Use a opção pch = para especificar simbolos a serem usados ao traçar pontos. Para os simbolos de 21 a 25, especifique a cor da borda (col =). plot(solo1$ds,solo1$ptotal, pch=21, ylim = c(0,0.6), xlim = c(1,2)) points(solo2$ds,solo2$ptotal,pch=2, col=&quot;blue&quot;) points(solo3$ds,solo3$ptotal,pch=&quot;%&quot;) Neste exemplo acima note, que foi adicionado o argumento ylim e xlim eles limitam os valores minimos e maximos: xlim=c(xmin, xmax) ylim=c(ymin, ymax)) Veja um exemplo do padrão dos pontos. 5.3.2 Mudando as linhas (lwd e lty) Você pode alterar linhas usando as seguintes opções. Isso é particularmente útil para linhas de referência, eixos e linhas de ajuste. A largura das linhas pode ser mudada com o argumento lwd=, enquanto os estilos das linhas podem ser modificados com o argumento lty=. plot(solo3$ds,solo3$ptotal, lwd=2) # linha grossa lines(solo2$ds,solo2$ptotal, lty=2) #linha interrompida x &lt;- 1:9 y &lt;- 1:9 plot(x, y, type = &quot;n&quot;) lines(c(2, 8), c(8, 8), lwd = 2) lines(c(2, 8), c(7, 7), lty = 2, lwd = 2) lines(c(2, 8), c(6, 6), lty = 3, lwd = 2) lines(c(2, 8), c(5, 5), lty = 4, lwd = 2) lines(c(2, 8), c(4, 4), lty = 5, lwd = 2) lines(c(2, 8), c(3, 3), lty = 6, lwd = 2) 5.3.3 Adicionando linhas a um grafico de pontos A função utilizada para inserir linhas é abline(). Vamos usar a função abline para inserir uma linha que mostra a média dos dados do eixo Y. o h é de linha horizontal. Fará uma linha na horizontal que passa pela média de y. plot(solo3$ds,solo3$ptotal, abline(h=mean(solo3$ptotal))) Para passar uma linha que passa pela média de x plot(solo3$ds,solo3$ptotal) plot(solo3$ds,solo3$ptotal, abline(v=mean(solo3$ds))) ## o v é de vertical Também é possível inserir as duas linhas ao mesmo tempo. plot(solo3$ds,solo3$ptotal, abline(h=mean(solo3$ptotal), v=mean(solo3$ds),col=&quot;red&quot;)) Com cores diferentes plot(solo3$ds,solo3$ptotal, abline(h=mean(solo3$ptotal), v=mean(solo3$ds),col=c(2,4))) 5.3.4 Definindo o intervalo dos eixos Se você quiser preencher um mesmo gráfico com linhas e pontos que possuem diferentes amplitudes como nosso exemplo do solos, deve usar o argumento type=n. Com este argumento um gráfico em branco é criado. plot(c(1.55,2),c(0,0.6),type=&#39;n&#39;) points(solo3$ds,solo3$ptotal, pch=2) points(solo2$ds,solo2$ptotal) 5.3.5 Personalizando os gráficos Alguns parâmetros podem ser usados no intuito de personalizar um gráfico no R. Exemplo: plot(solo1$ptotal,solo1$ds) plot(solo1$ptotal,solo1$ds, #plota ds e ptotal xlab=&quot;Macroporosdiade (%)&quot;, #nomeia o eixo x ylab=expression(Ds~(mg~Kg^{-1})), #nomeia o eixo y main=&quot;Como personalizar um gráfico&quot;, #referente ao título xlim=c(0.48,0.64), #limites do eixo x ylim=c(0,2), col=&quot;red&quot;, #limites do eixo y pch=22, #padrão dos pontos bg=&quot;yellow&quot;, #cor de preenchimento tcl=0.4, #tamanho dos traços dos eixos las=1, #orientação do texto em y cex=1.5, #tamanho do objeto do ponto bty=&quot;l&quot;, #altera as bordas abline(lm(solo1$ds~solo1$ptotal))) #regressao dos pontos Veja o demo(plotmath) para saber mais sobre anotações em gráficos. 5.4 Histogramas A função hist() produz um histograma dos dados informados em seu argumento enquanto a função barplot() produz um gráfico de barras. hist(solo1$ds) rug(solo1$ds) 5.4.1 Personalizando gráficos Os histogramas criados no R seguem um certo padrão (conhecido como parâmetros default) que podem ser alterados de acordo com a preferência do usuário. Você pode obter informações detalhadas desses parâmetros se usar os recursos de ajuda do R. hist(solo1$ds, #histograma de ds main=&quot;Histograma Personalizado\\ndensidade do solo&quot;,#título xlab=expression(Ds~(mg~Kg^{-1})), #texto do eixo das abscissas ylab=&quot;Probabilidades&quot;, #texto do eixo das ordenadas xlim=c(1,2), #limites do eixo de x ylim=c(0,10), #limites do eixo y col=&quot;lightblue&quot;, #cor das colunas border=&quot;white&quot;, #cor das bordas das colunas adj=0, #alinhamento dos textos 0, 0.5 e 1 col.axis=&quot;red&quot;) #cor do texto nos eixos 5.5 Gráficos de Barras Assemelha-se ao histograma, Porém, nesse caso, os dados referem-se a categoria ou aos tratamentos barplot(solo$ptotal,names.arg=solo$z, horiz = T) 5.6 Boxplots Dados de um experimento visando controle de pulgão (Aphis gossypii Glover) em cultura de pepino, instalado em delineamento inteiramente casualizado com 6 repetições. A resposta observada foi o número de pulgões após a aplicação de produtos indicados para seu controle. dados &lt;- read.table(&quot;https://www.dropbox.com/s/jjyo8dhyy0qt3ft/BanzattoQd3.2.1.txt?dl=1&quot;) str(dados) ## &#39;data.frame&#39;: 30 obs. of 3 variables: ## $ trat : Factor w/ 5 levels &quot;Azinfos etilico&quot;,..: 5 1 3 4 2 5 1 3 4 2 ... ## $ rept : int 1 1 1 1 1 2 2 2 2 2 ... ## $ pulgoes: int 2370 1282 562 173 193 1687 1527 321 127 71 ... trat Fator de níveis nominais. Tratamento aplicado para controle do pulgão. rept Número inteiro que identifica as repetições de cada tratamento. pulgões Número de pulgões coletados 36 horas após a pulverização dos tratamentos. Boxplots podem ser criados para variáveis individuais ou para variáveis por grupo. O formato é boxplot ( x , data =) , em que x é uma fórmula e data = denota o quadro de dados que fornece os dados. Um exemplo de uma fórmula é y ~ group onde um boxplot separado para a variável numérica é gerado para cada valor de group. x11() boxplot(pulgoes~trat, #formula do boxplot data = dados, #conjunto de dados main=&quot;boxplot&quot;, #título xlab=&quot;Controle do pulgão&quot;, #texto do eixo x ylab=&quot;Numero de plugões&quot;, #texto do eixo y col=3) #cor verde Adicione horizontal = TRUE para inverter a orientação do eixo. boxplot(pulgoes~trat, #formula do boxplot data = dados, #conjunto de dados main=&quot;boxplot&quot;, #t?tulo xlab=&quot;Controle do pulgão&quot;, #texto do eixo x ylab=&quot;Numero de plugões&quot;, #texto do eixo y col=3, horizontal = T, #cor verde notch=T) #teste para mediana ## Warning in bxp(list(stats = structure(c(825, 871, 972.5, 1282, 1527, 44, : ## some notches went outside hinges (&#39;box&#39;): maybe set notch=FALSE 5.6.1 Boxplot com fatorial Boxplot com 2 fatores, com caixas coloridas para facilitar a interpretação. Efeito de Recipientes para duas Espécies de Eucalipto Experimento em esquema fatorial 3x2 para estudar o efeito de 3 tipos de recipientes para a produção de mudas de duas espécies de Eucalipto. O experimento foi instalado em delineamento inteiramente casualizado. recipie São os níveis de recipiente estudados: - SPP - saco plástico pequeno; - SPG - saco plástico grande; e - Lam - laminado. especie São as espécies de Eucalipto: Eucalyptus citriodora e Eucalyptus grandis rept Identifica as repetições de cada combinação dos fatores recipiente e espécie. alt Altura das mudas aos 80 dias de idade (cm). Baixar dados via web. fat &lt;- read.table(&quot;https://www.dropbox.com/s/sahc5n80rlkcfx4/BanzattoQd5.2.4.txt?dl=1&quot;) str(fat) ## &#39;data.frame&#39;: 24 obs. of 4 variables: ## $ recipie: Factor w/ 3 levels &quot;Lam&quot;,&quot;SPG&quot;,&quot;SPP&quot;: 3 3 2 2 1 1 3 3 2 2 ... ## $ especie: Factor w/ 2 levels &quot;E. citriodora&quot;,..: 1 2 1 2 1 2 1 2 1 2 ... ## $ rept : int 1 1 1 1 1 1 2 2 2 2 ... ## $ alt : num 26.2 24.8 25.7 19.6 22.8 19.8 26 24.6 26.3 21.1 ... Gerar o gráfico boxpolt com o comando abaixo. boxplot(fat$alt~fat$recipie*especie, data=fat, notch=F, col=(c(&quot;gold&quot;,&quot;darkgreen&quot;,&quot;brown&quot;)), main=&quot;Fatorial&quot;, xlab=&quot;Recipiente e Espécies&quot;, ylab=&quot;Altura de plantas (cm)&quot;) 5.7 Cores Gráficos em preto e branco são bons na maioria dos casos, mas cores podem ser mudadas usando col=\"red\" (escrevendo o nome da cor) ou col=2 (usando números). O comando abaixo mostra os números que especificam algumas cores. pie(rep(1,30),col=rainbow(30)) Veja sua tabela de cores executando o script paletedecores.R. Podemos também criar cores personalizadas usando a função do rgb(), que recebe como argumentos as quantidades de vermelho (red), verde (green) e azul (blue) e, opcionalmente, o grau de opacidade (alpha). Os valores devem ser números reais entre 0 e 1. Exemplos: goiaba &lt;- rgb(0.94, 0.41, 0.40) goiaba.semitrans &lt;- rgb(0.94, 0.41, 0.40, alpha = 0.5) vitamina &lt;- rgb(red = c(0.87, 0.70), green = c(0.83, 0.77), blue = c(0.71, 0.30), names = c(&quot;leite&quot;, &quot;abacate&quot;)) 5.8 Interagindo com a Janela gráfica Poderemos com o mouse marcar o ponte desejado usando a função identify () plot(solo1$ds~solo1$ptotal) identify(solo1$ds, n=1) ## integer(0) 5.9 Texto e tamanho do símbolo As seguintes opções podem ser usadas para controlar o tamanho do texto e do símbolo em gráficos. cex número que indica o valor pelo qual o texto e os símbolos de plotagem devem ser dimensionados em relação ao padrão. 1 = padrão, 1,5 é 50% maior, 0,5 é 50% menor, etc. 5.10 Fontes Você pode definir facilmente o tamanho e o estilo da fonte, mas a familia de fontes é um pouco mais complicada. Fonte Número inteiro que especifica a fonte a ser usada para texto. 1 = simples, 2 = negrito, 3 = itálico, 4 = negrito itálico, 5 = símbolo plot(1:10,1:10,type=&quot;n&quot;) windowsFonts( A=windowsFont(&quot;Arial Black&quot;), B=windowsFont(&quot;Bookman Old Style&quot;), C=windowsFont(&quot;Comic Sans MS&quot;), D=windowsFont(&quot;Symbol&quot;) ) text(3,3,&quot;Hello World Default&quot;) text(4,4,family=&quot;A&quot;,&quot;Hello World from Arial Black&quot;) text(5,5,family=&quot;B&quot;,&quot;Hello World from Bookman Old Style&quot;) text(6,6,family=&quot;C&quot;,&quot;Hello World from Comic Sans MS&quot;) text(7,7,family=&quot;D&quot;, &quot;Hello World from Symbol&quot;) plot(solo1$ds,solo1$ptotal, main=&quot;Fatorial&quot;, xlab=&quot;Recipiente e Espécies&quot;, ylab=&quot;Altura de plantas (cm)&quot;, cex.axis=1, #ampliação da anotação do eixo em relação ao cex cex.lab=1.5, #ampliação dos rótulos x e y em relação ao cex cex.main=1.5, #ampliação de títulos em relação ao cex font.axis=3, #fonte para anotação de eixo font.main=4, #fonte para títulos font.lab=4, #fonte para rótulos text(1.5,0.5,family=&quot;A&quot;, &quot;Engenharia Agrícola&quot;,cex =1,pos =2)) 5.11 Visualizar vários gráficos 5.11.1 Varios gráficos na mesma janela gráfica Você pode dar instruções para o programa mostrar diversos gráficos pequenos em uma mesma janela ao invês de um apenas. Para isto use a função par(). Exemplo 1 par(mfrow = c(2,2)) #2 linhas e 2 colunas plot(solo1$ptotal,solo1$ds) boxplot(solo1$ds,solo2$ds, solo3$ds) hist(solo$ptotal) plot(solo$ptotal,solo$ds) Exemplo 2 par(mfrow = c(2,3)) pairs(solo) hist(solo$ds) plot(solo$ds, col=solo$z) plot(density(solo$ds)) 5.12 Salvando gráficos Você pode salvar o gráfico em vários formatos no menu Arquivo -&gt; Salvar como. Você também pode salvar o gráfico via código usando uma das seguintes funções. pdf (file = &quot;meugráfico.pdf&quot;) #ficheiro PDF win.metafile (&quot;meu grafico.wmf&quot;) #metarquivo do windows png (&quot;meu grafico.png&quot;) #arquivo png jpeg (&quot;meu grafico.jpg&quot;) #arquivo jpeg bmp (&quot;meu grafico.bmp&quot;) #arquivo bmp postscript (&quot;meu grafico.ps&quot;) #arquivo postscript "]
]
